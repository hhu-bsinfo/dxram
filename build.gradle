buildscript {
    repositories {
        mavenCentral()

        maven {
            url "https://plugins.gradle.org/m2/"
        }

        maven {
            url "https://dl.bintray.com/hhu-bsinfo/dxram"
        }

        maven {
            url 'https://oss.jfrog.org/artifactory/oss-snapshot-local'
        }
    }

    dependencies {
        classpath "de.hhu.bsinfo:dxbuild:0.4.0" + (Boolean.valueOf(System.getProperty('release')) ? '' : '-SNAPSHOT')
    }
}

plugins {
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
    id "com.jfrog.artifactory" version "4.7.5"
}

apply plugin: 'dxbuild'
group = 'de.hhu.bsinfo'
version = '0.8.0' + (Boolean.valueOf(System.getProperty('release')) ? '' : '-SNAPSHOT')

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

mainClassName = 'de.hhu.bsinfo.dxram.Runner'

applicationDefaultJvmArgs = [
        '-Dlog4j.configurationFile=file:DXRAM_HOME/config/log4j2.xml',
        '-Ddxram.config=DXRAM_HOME/config/dxram.json',
        '-Ddxram.baseDir=DXRAM_HOME'/*,
        '-Djava.system.class.loader=de.hhu.bsinfo.dxram.loader.DistributedLoader'*/
]

project.startScripts.with {
    doLast {
        unixScript.text = unixScript.text.replace('DXRAM_HOME', '\$APP_HOME')
    }
}

// create empty dxapp folder in dist
installDist.doLast {
    project.file("$project.buildDir/dist/$project.name/dxapp").mkdir()
}

repositories {
    mavenCentral()

    maven {
        url "https://dl.bintray.com/hhu-bsinfo/dxram"
    }

    maven {
        url 'https://oss.jfrog.org/artifactory/oss-snapshot-local'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-Werror", "-Xlint:sunapi", "-XDenableSunApiLintControl"]
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

dependencies {
    implementation fileTree(dir: 'lib', include: ['*.jar'])

    compileOnly 'org.projectlombok:lombok:1.18.2'

    api 'de.hhu.bsinfo:dxmem:0.8.0' + (Boolean.valueOf(System.getProperty('release')) ? '' : '-SNAPSHOT')
    api 'de.hhu.bsinfo:dxnet:0.8.0' + (Boolean.valueOf(System.getProperty('release')) ? '' : '-SNAPSHOT')
    api 'de.hhu.bsinfo:dxlog:0.8.0' + (Boolean.valueOf(System.getProperty('release')) ? '' : '-SNAPSHOT')
    api 'de.hhu.bsinfo:dxmon:0.5.0' + (Boolean.valueOf(System.getProperty('release')) ? '' : '-SNAPSHOT')
    nativeApi 'de.hhu.bsinfo:dxutils:0.8.0' + (Boolean.valueOf(System.getProperty('release')) ? '' : '-SNAPSHOT')

    implementation 'info.picocli:picocli:3.9.5'

    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    
    implementation 'io.javalin:javalin:2.6.0'
    
    implementation 'com.google.guava:guava:26.0-jre'
    implementation 'org.apache.zookeeper:zookeeper:3.4.13'
    implementation('org.apache.curator:curator-x-discovery:4.0.1') {
        exclude group: 'org.apache.zookeeper', module: 'zookeeper'
    }

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.9.0'
    testImplementation "org.mockito:mockito-core:2.19.0"

    extTestImplementation 'com.google.guava:guava:26.0-jre'
    extTestImplementation 'org.apache.zookeeper:zookeeper:3.4.13'
    extTestImplementation('org.apache.curator:curator-x-discovery:4.0.1') {
        exclude group: 'org.apache.zookeeper', module: 'zookeeper'
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

//todo does not work with gradle 4
/* extTest {
    jvmArgs '-Djava.system.class.loader=de.hhu.bsinfo.dxram.loader.DistributedLoader'
} */

apply from: 'publish.gradle'
apply from: 'bintray.gradle'
apply from: 'artifactory.gradle'
apply from: 'types.gradle'

task wrapper(type: Wrapper) {
    gradleVersion = "4.10"
}
